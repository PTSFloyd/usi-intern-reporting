<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAEAIABoBAAANgAAACAgAAABAAgAqAgAAJ4EAAAwMAAAAQAIAKgOAABGDQAAKAAAABAA
        AAAgAAAAAQAgAAAAAAAABAAAIy4AACMuAAAAAAAAAAAAAP38/v/9/P6M/fz+/v38/v79/P6T/fz+//38
        /pr9/P7//fz+jf38/pH9/P7//fz+mv38/rrUycWW/fz+nv38/o39/P7//fz+//38/v7Txr2Kp414/7Se
        jYzv6uj+/fz+nODX0f+rkn6Qu6iY/+Tb15D6+fr/q5aMkP38/v/9/P6Q/fz+//38/vvVycD/mn1k//r5
        +v/7+vz/wbCh//z7/f+KaEv/5d7Z//38/v+oj3r/+Pb3/7SjmP/9/P7//fz+/v38/vv9/P4AnYFpANrP
        xwD9/P7//fz+APDr6QDj29b7xrapAP38/gD9/P4AxbWnx9XIwP+zoZb//fz+//38/vv9/P7//fz+x5Jy
        V//k3Nj//fz+//38/pn9/P7+1svC//j19v/9/P7//fz+/5l8Y//Qw7n8rJiL//38/gD9/P4A/fz+//38
        /v+RcFX/5t/b+/38/v/9/P7//fz+ttXJwP/9/P62+ff4/6GFb7ZoPBb/9fLy/6OLe/v9/P7//fz+//38
        /v/9/P7/kXBVAebf2/z9/P7//fz+//38/v/VycD/+Pb2gIFcPf9vRSD/39XP/v38/v+Yfmv//fz+//38
        /sf9/P7f/fz+35FwVd/m39uP/fz+kf38/pr9/P7208e9wbSfjZOKaEvR8+/ukv38/ov9/P6YjnJei/38
        /oz9/P78/fz+3/38/t+RcFXf5t/b3/38/t/9/P7f+fb339XIwN+jiHHf+Pb33/38/t/w7Orf/fz+34dp
        Ut/9/P7f/fz+3/38/t/9/P7fkHBV3+Xd2N/9/P7f/fz+3+zn5d/YzMTfv6ye3/f09d/9/P7ftJ6M3/j2
        999yTTDf/fz+3/38/t/9/P7f2M3F36WMdt/Arp/f+Pb23/38/t+wmofftJ6M3/bz89+/rJ3fsZuJ37Od
        i9/WzMbfpo173+nj4N/9/P7f/fz+3/38/t/6+P3f49/43/Hv+9/7+v3f/fz+3/38/t/9/P7f/fz+9cC7
        8N+bj+jfhHjj33Ji39+onevf+fj93/38/t+spuzflIrm35+T6d+Th+bfgXTi33pr4d94aODfqZ/r39nW
        9t/n5Pnf/fz+35aL59/HwvLfMxnQ34V349/Z1vbfm5Lo34Z3499sWt3fWUXa315K2t+JeuTfqqDr36ee
        69+BcuLfY1Hc315M2t9aRtnf2tf23zUc0N9YRNjf5uX5//38/v/9/P7//fz+//38/t/h3vjfn5Pp31xI
        2t8tEs/fTzjX33xs4d+ajejfkYLm30gx1d8sEM7fn5Tp3/38/v/9/P7//fz+//38/v/9/P7f/fz+3/38
        /t/9/P7f6eb636+l7N9/b+LfYUzb31ZA2N9zYt/ft6/u3/38/v8AAAAAAAAAAAAAAAB24AAAAAMAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAACAAAABAAAAAAQAIAAAA
        AAAABAAAIy4AACMuAAAAAQAAAAEAAP38/gDi3/gAw7vxAKGV6QCGeOMAfGzhAKic6wDRzPQA+Pf6APTz
        /AC0re4AfHLhAEQw1AAsEc8AKw7OAEMr1ADu7PsAZlXcACUMzQA0G9EAPSjSADsj0wC+vO8A6OX5AKSb
        6gBgTNsALxfQAFhD2QCLfeQAk4fmAHdr4ABkWdsAnJLoAIJ14wBtXN4AVUHZALm07wCPhuUATjrXAMXA
        8gDd2vcASjTWAGlW3QDZ1PYAzcfzAFtK2gA3IdIAqqPrAHJh3wCYj+gAHgrMALGn7QDV0PUA8O77AL+4
        8ABwX98AnZjpAOHZ0wD18/MA1Mi/APj29wDx7u0AspyLAJNzWQCafWQAxraqAPPw7wDt6OcAe1QzAFoq
        AACHZEYAtqKTAO/q6QCwmYYAaDwWAGo/GQDOwbYA5d7aALahjwBfMAcAqpJ9AHBLMQBXKgYAyLmsANHD
        uQCvmYYAjW1TALmllQCMak4A6+XiAFMmAQB5VjsA6OLeAIFcPABlPRwAl3xoAINfQQDLvLAAaUQlAKSK
        dgBgMgoAbkksAKWPgAB4US8ArZaCAKiOeQBrQBoAd1I3AKqYiwBkNxAAfVk7AK2ckADZz8cAhGJKALak
        mACCZFYA3NPMAItuWQDBr6EAkXdjAJN5ZQDWysIAu6eYAOfg3ACdgmwAyb67AJ2FeABnOxUApo16AJZ4
        XgChhm8AWTAbANHGwgD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHsAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfoQAAAAAAAAAAAAAAAB7eXQAAAAAAAAAOnB5PQAAAABNQwAA
        AAAAAAAAAABwRGRubmdBAAAAQ4FkRGNufDwAPYNzAAAAAAAAAAAAdGSBPQAAOmNBAABpRYIAAACCggAA
        fH0AAAAAAAAAAABEZwAAAAAAAHw8AGhEAAAAADx/WQCATAAAAAAAAAAAQ0VQAAAAAAAAO3kATnYAAAAA
        AFh6AH59AAAAAAAAAAB5RXYAAAAAAABCegB6ewAAAAAAVnwAfH0AAAAAAAAAAGFFUwAAAAAAAAA+AFkA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHedAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJyWAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHd+BgAAAAAAAAAAAAAAAAAAAAAGk4xQTlB0XwAAAAAAAAAA
        Sph4Tk5oXEoAAAAAd5mamwAAAAAAAAAAAAAAAAAAAJVRVFRZdHSSXYp7AAAAAACIXVRdS5dJkpFrAAAA
        iXp/jgAAAAAAAAAAAAAAAAAAh31UeJUAAAAAd2ZZBgAAAGJUVH1zAAAAAIJdkAAAAEmWAAAAAAAAAAAA
        AAAAAAAATFRTAAAAAAAAAACCZwAAAGFUXX4AAAAAAAaSWQAAAJSPAAAAAAAAAAAAAAAAAABhVFRbAAAA
        AAAAAAAGWWkAAJBUZgAAAAAAAACTVE0AAE2PAAAAAAAAAAAAAAAAAABmVFEAAAAAAAAAAAAAeWEAAFpU
        WwAAAAAAAAB7VIIAAGKPAAAAAAAAAAAAAAAAAABZVHQAAAAAAAAAAAAAkGcAAEpQAAAAAAAAAAAAkZIA
        AHaPAAAAAAAAAAAAAAAAAACBVGcAAAAAAAAAAAAAiXQAAEqMAAAAAAAAAACJVIEAAHaPAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAECAwQEAgUGAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAA==
</value>
  </data>
</root>